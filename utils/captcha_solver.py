import time
import random
import cv2
import numpy as np
import os
import json
import base64
from datetime import datetime
from PIL import Image
from io import BytesIO
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from logging import Logger

class CaptchaSolver:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DataDome –∫–∞–ø—á–µ–π"""
    
    def __init__(self, driver: WebDriver, logger: Logger):
        self.driver = driver
        self.logger = logger
    
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∫–∞–ø—á–∏
        self.screenshots_dir = "captcha_screenshots"
        os.makedirs(self.screenshots_dir, exist_ok=True)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.actions_log = []
        
    def _log_action(self, action: str, details: dict = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "action": action
        }
        if details:
            log_entry.update(details)
        self.actions_log.append(log_entry)
    
    def _save_log(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            log_file = os.path.join(self.screenshots_dir, "captcha_actions.json")
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(self.actions_log, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    def check_captcha(self) -> tuple[bool, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ê–ö–¢–ò–í–ù–û–ô –∫–∞–ø—á–∏ DataDome –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–Ω–∞–π–¥–µ–Ω–∞_–∫–∞–ø—á–∞, ip_blocked)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –í–ò–î–ò–ú–û–ì–û iframe —Å geo.captcha-delivery.com
            iframes = self.driver.find_elements('tag name', 'iframe')
            for iframe in iframes:
                try:
                    src = iframe.get_attribute('src') or ''
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ iframe –∫–∞–ø—á–∏
                    if 'geo.captcha-delivery.com' not in src and 'captcha-delivery.com' not in src:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä t - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å t=fe (–µ—Å–ª–∏ t=bv —Ç–æ IP –∑–∞–±–∞–Ω–µ–Ω)
                    if 't=bv' in src:
                        print(f"‚ö†Ô∏è  IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω DataDome (t=bv)")
                        return False, True  # ip_blocked = True
                    
                    if 't=fe' not in src:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ iframe –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
                    if not iframe.is_displayed():
                        continue
                    
                    size = iframe.size
                    if size['width'] == 0 or size['height'] == 0:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ iframe –Ω–µ —Å–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ CSS
                    visibility = iframe.value_of_css_property('visibility')
                    display = iframe.value_of_css_property('display')
                    
                    if visibility == 'hidden' or display == 'none':
                        continue
                    
                    print(f"üîç –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π iframe DataDome (—Ä–∞–∑–º–µ—Ä: {size['width']}x{size['height']})")
                    print(f"   URL: {src[:120]}...")
                    return True, False
                    
                except Exception as ex:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ iframe - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
            
            return False, False
        except Exception as ex:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏: {ex}")
            return False, False
    
    def save_page_with_captcha(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏ (–Ω–µ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞!)"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º iframe —Å –∫–∞–ø—á–µ–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –Ω–µ–≥–æ
            iframes = self.driver.find_elements(By.TAG_NAME, 'iframe')
            for iframe in iframes:
                try:
                    src = iframe.get_attribute('src') or ''
                    if 'captcha-delivery.com' in src and iframe.is_displayed():
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe
                        self.driver.switch_to.frame(iframe)
                        
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–ø—á–∏ –≤–Ω—É—Ç—Ä–∏ iframe
                        screenshot_filename = os.path.join(self.screenshots_dir, "captcha_before.png")
                        try:
                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ div#captcha__puzzle
                            puzzle = self.driver.find_element(By.CSS_SELECTOR, "div#captcha__puzzle")
                            puzzle.screenshot(screenshot_filename)
                        except:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                            try:
                                main = self.driver.find_element(By.CSS_SELECTOR, "div.main__container")
                                main.screenshot(screenshot_filename)
                            except:
                                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - body
                                body = self.driver.find_element(By.TAG_NAME, "body")
                                body.screenshot(screenshot_filename)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ
                        self.driver.switch_to.default_content()
                        print(f"üì∏ –ö–∞–ø—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_filename}")
                        return
                except:
                    self.driver.switch_to.default_content()
                    continue
            
            print(f"üì∏ –ö–∞–ø—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            
        except Exception as ex:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞–ø—á–µ–π: {ex}")
            try:
                self.driver.switch_to.default_content()
            except:
                pass
    
    def detect_puzzle_gap(self, background_image, puzzle_piece_image=None):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç X-–ø–æ–∑–∏—Ü–∏—é –ø–∞–∑–∑–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è template matching (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –∏–∑ GitHub)
        
        –ú–ï–¢–û–î –ò–ó https://github.com/glizzykingdreko/Datadome-GeeTest-Captcha-Solver:
        - –ü—Ä–∏–º–µ–Ω—è–µ–º Canny edge detection –∫ –æ–±–æ–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        - Template matching –Ω–∞—Ö–æ–¥–∏—Ç –≥–¥–µ –∫—É—Å–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ–Ω–æ–º
        - –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¶–ï–ù–¢–† –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫—É—Å–æ—á–∫–∞ (center_x)
        - –≠—Ç–æ –∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è —Å–ª–∞–π–¥–µ—Ä!
        
        Args:
            background_image: PIL Image –∏–ª–∏ numpy array —Ñ–æ–Ω–∞
            puzzle_piece_image: PIL Image –∏–ª–∏ numpy array –∫—É—Å–æ—á–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            (center_x, width) - –¶–ï–ù–¢–† –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Å–æ—á–∫–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω–∞
            None - –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç puzzle_piece
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy array –¥–ª—è OpenCV
            bg_array = np.array(background_image)
            bg_bgr = cv2.cvtColor(bg_array, cv2.COLOR_RGB2BGR)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É—Å–æ—á–µ–∫ –ø–∞–∑–∑–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –∏–∑ GitHub
            if puzzle_piece_image is not None:
                piece_array = np.array(puzzle_piece_image)
                piece_bgr = cv2.cvtColor(piece_array, cv2.COLOR_RGB2BGR)
                
                # –¢–û–ß–ù–û –ö–ê–ö –í GITHUB: Apply edge detection
                edge_background = cv2.Canny(bg_bgr, 100, 200)
                edge_piece = cv2.Canny(piece_bgr, 100, 200)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                cv2.imwrite(os.path.join(self.screenshots_dir, "bg_edges.png"), edge_background)
                cv2.imwrite(os.path.join(self.screenshots_dir, "piece_edges.png"), edge_piece)
                
                # –¢–û–ß–ù–û –ö–ê–ö –í GITHUB: Convert to RGB for visualization
                edge_background_rgb = cv2.cvtColor(edge_background, cv2.COLOR_GRAY2RGB)
                edge_piece_rgb = cv2.cvtColor(edge_piece, cv2.COLOR_GRAY2RGB)
                
                # –¢–û–ß–ù–û –ö–ê–ö –í GITHUB: Template matching
                res = cv2.matchTemplate(edge_background_rgb, edge_piece_rgb, cv2.TM_CCOEFF_NORMED)
                _, max_val, _, max_loc = cv2.minMaxLoc(res)
                
                # –¢–û–ß–ù–û –ö–ê–ö –í GITHUB: Calculate required values
                h, w = edge_piece.shape[:2]
                top_left = max_loc
                bottom_right = (top_left[0] + w, top_left[1] + h)
                
                # –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞ - —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞!
                center_x = top_left[0] + w // 2
                center_y = top_left[1] + h // 2
                
                # –†–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ö–ê–ö –í GITHUB
                debug_img = bg_bgr.copy()
                cv2.rectangle(debug_img, top_left, bottom_right, (0, 0, 255), 2)
                # –ó–µ–ª–µ–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ –¶–ï–ù–¢–†–ï
                cv2.line(debug_img, (center_x, 0), (center_x, bg_bgr.shape[0]), (0, 255, 0), 2)
                # –ó–µ–ª–µ–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                cv2.line(debug_img, (0, center_y), (bg_bgr.shape[1], center_y), (0, 255, 0), 2)
                
                cv2.imwrite(os.path.join(self.screenshots_dir, "template_match_result.png"), debug_img)
                
                print(f"   Template matching (GitHub method): —Ü–µ–Ω—Ç—Ä –∫—É—Å–æ—á–∫–∞ at {center_x}px (confidence: {max_val:.3f})")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞ (–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞) –∏ —à–∏—Ä–∏–Ω—É
                return (center_x, w)
            
            # –ú–µ—Ç–æ–¥ –∫–æ–Ω—Ç—É—Ä–æ–≤ - CANNY + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            gray = cv2.cvtColor(bg_bgr, cv2.COLOR_BGR2GRAY)
            cv2.imwrite(os.path.join(self.screenshots_dir, "captcha_gray.png"), gray)
            
            # Canny edge detection
            edges = cv2.Canny(gray, 50, 150)
            cv2.imwrite(os.path.join(self.screenshots_dir, "captcha_edges.png"), edges)
            
            # –ò—â–µ–º –°–ê–ú–´–ô –ë–û–õ–¨–®–û–ô –ö–û–ù–¢–£–† (—ç—Ç–æ –∏ –µ—Å—Ç—å –≤—ã—Ä–µ–∑!)
            height, width = gray.shape
            
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –∏—â–µ–º –ø–æ –§–û–†–ú–ï, –∞ –Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏!
            # –í—ã—Ä–µ–∑ –ø–∞–∑–∑–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –í –õ–Æ–ë–û–ú –º–µ—Å—Ç–µ (—Å–ª–µ–≤–∞, —Ü–µ–Ω—Ç—Ä, —Å–ø—Ä–∞–≤–∞)
            puzzle_candidates = []
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                area = cv2.contourArea(contour)
                
                # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –í–´–†–ï–ó–ê –ü–ê–ó–ó–õ–ê:
                # 1. –†–∞–∑–º–µ—Ä: —à–∏—Ä–∏–Ω–∞ 20-150px, –≤—ã—Å–æ—Ç–∞ 20-150px (—à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω!)
                # 2. –ù–ï –Ω–∞ –∫—Ä–∞—é: 5 < x < width-5
                # 3. –§–æ—Ä–º–∞: –Ω–µ —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–π (h/w > 0.5) –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π (h/w < 2)
                # 4. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å: area > 100
                if 20 < w < 150 and 20 < h < 150:
                    if 5 < x < width - 5:  # –ù–µ –Ω–∞ –∫—Ä–∞—é
                        aspect_ratio = h / w if w > 0 else 0
                        if 0.5 < aspect_ratio < 2.0 and area > 100:  # –†–∞–∑—É–º–Ω–∞—è —Ñ–æ—Ä–º–∞
                            center_x = x + w // 2
                            puzzle_candidates.append({
                                'x': x,
                                'y': y,
                                'w': w,
                                'h': h,
                                'area': area,
                                'center_x': center_x,
                                'aspect_ratio': aspect_ratio
                            })
            
            if puzzle_candidates:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏ - –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                puzzle_candidates.sort(key=lambda c: c['area'], reverse=True)
                
                best = puzzle_candidates[0]
                gap_left_edge = best['x']
                gap_center = best['center_x']
                
                # –†–∏—Å—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—É—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º bg_bgr –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –µ—Å—Ç—å)
                debug_img = bg_bgr.copy()
                
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –≤—ã—Ä–µ–∑–∞
                cv2.rectangle(debug_img, (best['x'], best['y']), (best['x']+best['w'], best['y']+best['h']), (0, 0, 255), 2)
                
                # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –¶–ï–ù–¢–†–ï (–¢–û–õ–°–¢–ê–Ø –ö–†–ê–°–ù–ê–Ø)
                cv2.line(debug_img, (gap_center, 0), (gap_center, height), (0, 0, 255), 3)
                
                # –†–∏—Å—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–ª–µ–≤—ã–π + width/3.25 + 3) –ó–ï–õ–Å–ù–û–ô –¢–û–õ–°–¢–û–ô
                target_pos = gap_left_edge + int(best['w'] / 3.25) + 3
                cv2.line(debug_img, (target_pos, 0), (target_pos, height), (0, 255, 0), 3)
                
                cv2.imwrite(os.path.join(self.screenshots_dir, "contours_method.png"), debug_img)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –õ–ï–í–´–ô –ö–†–ê–ô –≤—ã—Ä–µ–∑–∞ –∏ –®–ò–†–ò–ù–£ (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞)
                return (gap_left_edge, best['w'])
            
            return None
            
        except Exception as ex:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ puzzle: {ex}")
            return None
    
    def solve_slider_captcha(self) -> bool:
        """–†–µ—à–∞–µ—Ç DataDome/GeeTest –∫–∞–ø—á—É - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –∏–∑ GitHub
        
        –õ–û–ì–ò–ö–ê (https://github.com/glizzykingdreko/Datadome-GeeTest-Captcha-Solver):
        ==============================================================================
        1. –ü–æ–ª—É—á–∞–µ–º –¥–≤–∞ canvas –∏–∑ –∫–∞–ø—á–∏:
           - Canvas #1: –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Ä–µ–∑–æ–º
           - Canvas #2: –ö—É—Å–æ—á–µ–∫ –ø–∞–∑–∑–ª–∞ (overlay –ø–æ–≤–µ—Ä—Ö Canvas #1)
        
        2. Template Matching (Canny 100,200):
           - –ü—Ä–∏–º–µ–Ω—è–µ–º Canny edge detection –∫ –æ–±–æ–∏–º canvas
           - cv2.matchTemplate –Ω–∞—Ö–æ–¥–∏—Ç –≥–¥–µ –∫—É—Å–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ–Ω–æ–º
           - –í—ã—á–∏—Å–ª—è–µ–º –¶–ï–ù–¢–† –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: center_x = max_loc[0] + width/2
           - –≠—Ç–æ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–û–ô –ø–æ–∑–∏—Ü–∏–∏ –≤—ã—Ä–µ–∑–∞!
        
        3. –ü–æ–∑–∏—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞:
           - –°–ª–∞–π–¥–µ—Ä –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é center_x (–¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞)
           - –≠—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∏–∑ –∏—Ö –∫–æ–¥–∞ - –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª!
        
        4. –î–≤–∏–∂–µ–Ω–∏–µ:
           - offset = center_x - current_position
           - ActionChains —Å –ø–ª–∞–≤–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º (–ù–ï –ú–ï–ù–Ø–ï–ú - —Ä–∞–±–æ—Ç–∞–µ—Ç!)
        
        5. Fallback (–µ—Å–ª–∏ –Ω–µ—Ç Canvas #2):
           - –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—É—Ä–æ–≤ –Ω–∞ Canvas #1
           - –§–æ—Ä–º—É–ª–∞: left_edge + width/3.25 + 3
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: True –µ—Å–ª–∏ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print(f"üéØ –†–µ—à–∞–µ–º –∫–∞–ø—á—É —Å –ø–æ–º–æ—â—å—é OpenCV template matching...")
            self._log_action("start_solving", {"method": "OpenCV template matching + human-like movement"})
            
            # –ù–∞—Ö–æ–¥–∏–º iframe —Å –∫–∞–ø—á–µ–π
            iframes = self.driver.find_elements(By.TAG_NAME, 'iframe')
            captcha_iframe = None
            
            for iframe in iframes:
                try:
                    src = iframe.get_attribute('src') or ''
                    if 'captcha-delivery.com' in src and iframe.is_displayed():
                        captcha_iframe = iframe
                        self._log_action("iframe_found", {"src": src[:100]})
                        break
                except:
                    continue
            
            if not captcha_iframe:
                self._log_action("error", {"message": "iframe –Ω–µ –Ω–∞–π–¥–µ–Ω"})
                return False
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe
            self.driver.switch_to.frame(captcha_iframe)
            self._log_action("switched_to_iframe")
            
            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ø—á–∏ - –í–ê–ñ–ù–û: –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–∫–∞ Canvas #2 –ø–æ–ª—É—á–∏—Ç style.left!
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ø—á–∏...")
            time.sleep(3)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ–∫–∞ Canvas #2 (–∫—É—Å–æ—á–µ–∫) –ø–æ–ª—É—á–∏—Ç –ø–æ–∑–∏—Ü–∏—é
            try:
                for attempt in range(10):
                    canvases_check = self.driver.find_elements(By.CSS_SELECTOR, "div#captcha__puzzle canvas")
                    if len(canvases_check) > 1:
                        block_style = canvases_check[1].get_attribute('style') or ''
                        if 'left' in block_style and 'left: 0px' not in block_style:
                            print(f"‚úÖ Canvas #2 –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø–æ–∑–∏—Ü–∏–µ–π: {block_style}")
                            break
                    time.sleep(0.5)
            except:
                pass
            

            
            # –ò—â–µ–º canvas —Å –ø–∞–∑–∑–ª–æ–º (–∏–∑ 111.html: div#captcha__puzzle > canvas)
            puzzle_canvas = None
            target_slider_position = None  # –¶–ï–õ–ï–í–ê–Ø –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
            
            try:
                # –ò—â–µ–º div#captcha__puzzle
                puzzle_container = self.driver.find_element(By.CSS_SELECTOR, "div#captcha__puzzle")
                
                # –ò—â–µ–º –≤—Å–µ canvas –≤–Ω—É—Ç—Ä–∏
                canvases = puzzle_container.find_elements(By.TAG_NAME, "canvas")
                self._log_action("canvas_elements_found", {"count": len(canvases)})
                
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π canvas (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–∑–∑–ª–∞)
                if len(canvases) > 0:
                    puzzle_canvas = canvases[0]
                    canvas_loc = puzzle_canvas.location
                    canvas_size = puzzle_canvas.size
                    self._log_action("canvas_background_found", {
                        "position": {"x": canvas_loc['x'], "y": canvas_loc['y']},
                        "size": {"width": canvas_size['width'], "height": canvas_size['height']}
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π canvas (–±–ª–æ–∫ –ø–∞–∑–∑–ª–∞ —Å class="block")
                if len(canvases) > 1:
                    block_canvas = canvases[1]
                    block_loc = block_canvas.location
                    block_size = block_canvas.size
                    block_style = block_canvas.get_attribute('style') or ''
                    block_class = block_canvas.get_attribute('class') or ''
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é Canvas #2 —á–µ—Ä–µ–∑ JavaScript
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º inline style.left –µ—Å–ª–∏ –µ—Å—Ç—å
                        inline_left = self.driver.execute_script("""
                            var elem = arguments[0];
                            var inlineStyle = elem.style.left;
                            var computedStyle = window.getComputedStyle(elem).left;
                            var rect = elem.getBoundingClientRect();
                            var parent = elem.parentElement.getBoundingClientRect();
                            var relativeLeft = rect.left - parent.left;
                            return {
                                inline_left: inlineStyle,
                                computed_left: computedStyle,
                                relative_left: relativeLeft
                            };
                        """, block_canvas)
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∞—Ä—Å–∏—Ç—å left –∏–∑ inline style
                        if inline_left.get('inline_left'):
                            try:
                                parsed_left = int(inline_left['inline_left'].replace('px', ''))
                                target_slider_position = parsed_left
                                print(f"   ‚≠ê Canvas #2 inline style left={parsed_left}px")
                            except:
                                pass
                        
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ inline, –∏—Å–ø–æ–ª—å–∑—É–µ–º relative position
                        if target_slider_position is None and inline_left.get('relative_left'):
                            rel_left = int(inline_left['relative_left'])
                            target_slider_position = rel_left
                            print(f"   ‚≠ê Canvas #2 relative left={rel_left}px")
                        
                        self._log_action("canvas_block_position_check", {
                            "inline_left": inline_left.get('inline_left', 'N/A'),
                            "computed_left": inline_left.get('computed_left', 'N/A'),
                            "relative_left": inline_left.get('relative_left', 0),
                            "target_slider_from_canvas": target_slider_position
                        })
                    except Exception as e:
                        self._log_action("error", {"message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ Canvas #2: {e}"})
                    
                    # –ü–∞—Ä—Å–∏–º left –∏–∑ style
                    if target_slider_position is None and ('left:' in block_style or 'left :' in block_style):
                        try:
                            block_left = int(block_style.split('left')[1].split(':')[1].split('px')[0].strip())
                            target_slider_position = block_left
                            print(f"   ‚≠ê Canvas #2 style left={block_left}px")
                            self._log_action("canvas_block_has_left_style", {"left": block_left})
                        except:
                            pass
                            
            except Exception as e:
                self._log_action("error", {"message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ canvas: {e}"})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º canvas —Å –ø–∞–∑–∑–ª–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º TEMPLATE MATCHING!
            gap_x = None
            gap_width = None
            used_template_matching = False  # –§–ª–∞–≥ –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            
            if puzzle_canvas:
                try:
                    # Canvas #1 - –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ JavaScript (toDataURL —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ –µ—Å—Ç—å)
                    bg_data_url = self.driver.execute_script("return arguments[0].toDataURL('image/png');", puzzle_canvas)
                    bg_data = bg_data_url.split(',')[1]  # –£–±–∏—Ä–∞–µ–º "data:image/png;base64,"
                    bg_bytes = base64.b64decode(bg_data)
                    bg_image = Image.open(BytesIO(bg_bytes))
                    bg_image.save(os.path.join(self.screenshots_dir, "canvas_background.png"))
                    
                    # Canvas #2 - –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ JavaScript —Å –ê–õ–¨–§–ê-–ö–ê–ù–ê–õ–û–ú!
                    piece_image = None
                    if len(canvases) > 1:
                        piece_data_url = self.driver.execute_script("return arguments[0].toDataURL('image/png');", canvases[1])
                        piece_data = piece_data_url.split(',')[1]
                        piece_bytes = base64.b64decode(piece_data)
                        piece_full = Image.open(BytesIO(piece_bytes))
                        piece_full.save(os.path.join(self.screenshots_dir, "canvas_piece_full.png"))
                        
                        # –í—ã—Ä–µ–∑–∞–µ–º –ù–ï–ü–†–û–ó–†–ê–ß–ù–£–Æ —á–∞—Å—Ç—å (–Ω–∞—Å—Ç–æ—è—â–∏–π –∫—É—Å–æ—á–µ–∫ –ø–∞–∑–∑–ª–∞!)
                        piece_array = np.array(piece_full.convert('RGBA'))
                        
                        if piece_array.shape[2] == 4:
                            # –ï—Å—Ç—å –∞–ª—å—Ñ–∞ –∫–∞–Ω–∞–ª - –≤—ã—Ä–µ–∑–∞–µ–º –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
                            alpha = piece_array[:,:,3]
                            non_transparent = alpha > 10
                            
                            rows = np.any(non_transparent, axis=1)
                            cols = np.any(non_transparent, axis=0)
                            
                            if rows.any() and cols.any():
                                y_min, y_max = np.where(rows)[0][[0, -1]]
                                x_min, x_max = np.where(cols)[0][[0, -1]]
                                
                                # –í—ã—Ä–µ–∑–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô –∫—É—Å–æ—á–µ–∫!
                                piece_image = piece_full.crop((x_min, y_min, x_max + 1, y_max + 1))
                                piece_image.save(os.path.join(self.screenshots_dir, "canvas_piece.png"))
                                print(f"   ‚úÖ –í—ã—Ä–µ–∑–∞–ª–∏ –∫—É—Å–æ—á–µ–∫: {piece_image.width}x{piece_image.height}px –∏–∑ {piece_full.width}x{piece_full.height}px")
                            else:
                                print(f"   ‚ö†Ô∏è  –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π canvas")
                                piece_image = piece_full
                        else:
                            print(f"   ‚ö†Ô∏è  –ù–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ –≤ PNG")
                            piece_image = piece_full
                        
                        if piece_image:
                            self._log_action("both_canvas_saved", {
                                "background": "canvas_background.png",
                                "piece": "canvas_piece.png",
                                "piece_size": {"width": piece_image.width, "height": piece_image.height}
                            })
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é template matching (–º–µ—Ç–æ–¥ –∏–∑ GitHub)
                    if piece_image:
                        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º TEMPLATE MATCHING (–º–µ—Ç–æ–¥ –∏–∑ GitHub)")
                        used_template_matching = True
                    gap_result = self.detect_puzzle_gap(bg_image, piece_image)
                    
                    if gap_result is not None:
                        gap_x, gap_width = gap_result
                        method = "template_matching" if piece_image else "contours"
                        
                        if piece_image:
                            # Template matching –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞
                            print(f"‚úÖ Gap –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º {method}: –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞={gap_x}px, —à–∏—Ä–∏–Ω–∞={gap_width}px")
                            self._log_action("gap_detected", {
                                "center_x": gap_x,
                                "width": gap_width,
                                "method": method
                            })
                        else:
                            # –ö–æ–Ω—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ª–µ–≤—ã–π –∫—Ä–∞–π
                            print(f"‚úÖ Gap –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º {method}: –ª–µ–≤—ã–π –∫—Ä–∞–π={gap_x}px, —à–∏—Ä–∏–Ω–∞={gap_width}px")
                            self._log_action("gap_detected", {
                                "left_edge_x": gap_x,
                                "width": gap_width,
                                "method": method
                            })
                    else:
                        gap_x, gap_width = None, None
                    
                except Exception as e:
                    self._log_action("error", {"message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ canvas: {e}"})
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å canvas, –ø—Ä–æ–±—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç iframe
            if gap_x is None:
                self._log_action("fallback_to_iframe_screenshot")
                iframe_screenshot = self.driver.get_screenshot_as_png()
                iframe_image = Image.open(BytesIO(iframe_screenshot))
                iframe_image.save(os.path.join(self.screenshots_dir, "captcha_iframe.png"))
                gap_result = self.detect_puzzle_gap(iframe_image)
                if gap_result:
                    gap_x, gap_width = gap_result
                else:
                    gap_x, gap_width = None, None
            
            if gap_x is None:
                self._log_action("error", {"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤—ã—Ä–µ–∑–∞"})
                self.driver.switch_to.default_content()
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
            if target_slider_position is not None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é Canvas #2 –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ë–ï–ó +20px - –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                final_target = target_slider_position
                print(f"   Canvas #2 position: {target_slider_position}px ‚Üí Slider target = {final_target}px")
            elif used_template_matching:
                # –ú–ï–¢–û–î GITHUB: Template matching –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞
                # –≠—Ç–æ –∏ –µ—Å—Ç—å —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ - –ë–ï–ó —Ñ–æ—Ä–º—É–ª!
                final_target = gap_x
                print(f"   Template matching (GitHub): –¶–ï–ù–¢–† –∫—É—Å–æ—á–∫–∞ = {gap_x}px ‚Üí –°–ª–∞–π–¥–µ—Ä –ù–ê {final_target}px")
            else:
                # –ú–µ—Ç–æ–¥ –∫–æ–Ω—Ç—É—Ä–æ–≤: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–µ–≤—ã–π –∫—Ä–∞–π, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É
                final_target = gap_x + int(gap_width / 3.25) + 3
                print(f"   –ö–æ–Ω—Ç—É—Ä—ã: –ª–µ–≤—ã–π –∫—Ä–∞–π={gap_x}px ‚Üí –°–ª–∞–π–¥–µ—Ä –Ω–∞ {final_target}px")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–∞–π–¥–µ—Ä - –∏—â–µ–º –¢–û–ß–ù–û —ç–ª–µ–º–µ–Ω—Ç div.slider
            slider = None
            try:
                slider = self.driver.find_element(By.CSS_SELECTOR, "div.slider")
                
                if slider.is_displayed():
                    slider_class = slider.get_attribute('class')
                    slider_style = slider.get_attribute('style')
                    slider_size = slider.size
                    slider_loc = slider.location
                    
                    self._log_action("slider_found", {
                        "class": slider_class,
                        "style": slider_style,
                        "size": {"width": slider_size['width'], "height": slider_size['height']},
                        "position": {"x": slider_loc['x'], "y": slider_loc['y']}
                    })
                else:
                    slider = None
            except Exception as e:
                self._log_action("error", {"message": f"–°–ª–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}"})
            
            if not slider:
                self._log_action("error", {"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–ª–∞–π–¥–µ—Ä–∞"})
                self.driver.switch_to.default_content()
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞ –∏–∑ style
            current_left = 0
            style = slider.get_attribute('style') or ''
            if 'left:' in style:
                try:
                    left_str = style.split('left:')[1].split('px')[0].strip()
                    current_left = int(left_str)
                except:
                    pass
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ (—Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π –Ω—É–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å)
            offset = final_target - current_left
            
            print(f"\n{'='*60}")
            print(f"üìä –†–ê–°–ß–Å–¢ –î–í–ò–ñ–ï–ù–ò–Ø –°–õ–ê–ô–î–ï–†–ê:")
            print(f"   –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞: {current_left}px")
            print(f"   –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {final_target}px")
            print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–≤–∏–Ω—É—Ç—å: {offset}px")
            print(f"{'='*60}\n")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á—ë—Ç –¥–≤–∏–∂–µ–Ω–∏—è
            method_name = "template_matching" if used_template_matching else "contours"
            self._log_action("calculate_movement", {
                "gap_position": gap_x,
                "method": method_name,
                "target_position": final_target,
                "current_position": current_left,
                "offset": offset,
                "direction": "right" if offset > 0 else "left"
            })
            
            # –î–≤–∏–∂–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            # –í–û–ó–í–†–ê–©–ê–ï–ú –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î ActionChains!
            success = False
            
            try:
                self._log_action("try_method_1", {"method": "ActionChains drag_and_drop_by_offset", "offset": offset})
                actions = ActionChains(self.driver)
                actions.click_and_hold(slider).pause(0.2)
                
                # –î–≤–∏–≥–∞–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
                steps = 15
                for i in range(steps):
                    step_offset = offset / steps
                    step_offset += random.uniform(-0.5, 0.5)
                    actions.move_by_offset(step_offset, 0)
                    actions.pause(random.uniform(0.02, 0.05))
                
                actions.release().perform()
                time.sleep(1)
                self._log_action("method_1_success")
                success = True
            except Exception as e:
                self._log_action("method_1_failed", {"error": str(e)})
            try:
                # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ø—á–∏ –≤–Ω—É—Ç—Ä–∏ iframe
                screenshot_path = os.path.join(self.screenshots_dir, "captcha_after_move.png")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ puzzle –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç
                try:
                    puzzle_container = self.driver.find_element(By.CSS_SELECTOR, "div#captcha__puzzle")
                    puzzle_container.screenshot(screenshot_path)
                except:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ø—á–∏
                    try:
                        main_container = self.driver.find_element(By.CSS_SELECTOR, "div.main__container")
                        main_container.screenshot(screenshot_path)
                    except:
                        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç body –≤–Ω—É—Ç—Ä–∏ iframe
                        body = self.driver.find_element(By.TAG_NAME, "body")
                        body.screenshot(screenshot_path)
                
                print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏ –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è: {screenshot_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞
                current_style = slider.get_attribute('style') or ''
                if 'left:' in current_style:
                    try:
                        current_pos = int(current_style.split('left:')[1].split('px')[0].strip())
                        diff = abs(current_pos - final_target)
                        self._log_action("slider_final_position", {
                            "current_pos": current_pos,
                            "target_pos": final_target,
                            "difference": diff,
                            "success": diff <= 5
                        })
                    except:
                        pass
            except Exception as e:
                self._log_action("error", {"message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}"})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
            self._save_log()
            
            # –ü–ê–£–ó–ê —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\n{'='*60}")
            print(f"‚è∏Ô∏è  –ü–ê–£–ó–ê 10 –°–ï–ö–£–ù–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ: {self.screenshots_dir}/captcha_after_move.png")
            print(f"   –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π: {self.screenshots_dir}/captcha_actions.json")
            print(f"   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
            print(f"{'='*60}\n")
            time.sleep(10)
            
            time.sleep(1)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.driver.switch_to.default_content()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            time.sleep(1)
            has_captcha, _ = self.check_captcha()
            
            if not has_captcha:
                print(f"üéâ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞!")
                self._log_action("captcha_solved", {"success": True})
                self._save_log()
            return True

            
        except Exception as ex:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏: {ex}")
            import traceback
            print(f"‚ùå Exception: {traceback.format_exc()}")
            
            try:
                self.driver.switch_to.default_content()
            except:
                pass
            
            return False
